/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/projects/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Projects
         * @description A dictionary of all projects ids and their name
         */
        get: operations["get_all_projects_api_projects_all_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Active Project
         * @description Get the pid of the currently active project.
         */
        get: operations["get_active_project_api_projects_active_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/load": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Load Project
         * @description Load the project with the given id and make it the active one.
         *     :param pid: Valid Project ID
         */
        put: operations["load_project_api_projects_load_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/new": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** New Project */
        post: operations["new_project_api_projects_new_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Project */
        delete: operations["delete_project_api_projects_delete_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/filmformats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get All Filmformats */
        get: operations["get_all_filmformats_api_filmformats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project/id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Project Id
         * @description The id of the currently active project.
         */
        get: operations["get_project_id_api_project_id_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project/name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Project Name
         * @description Get the name of the currently active project.
         */
        get: operations["get_project_name_api_project_name_get"];
        /**
         * Put Project Name
         * @description Change the name of the currently active project.
         *     The new name must be unique and must not contain any characters that are unusable for a filesystem name.
         */
        put: operations["put_project_name_api_project_name_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project/allpaths": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get All Paths */
        get: operations["get_all_paths_api_project_allpaths_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project/path": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Project Path */
        get: operations["get_project_path_api_project_path_get"];
        /** Put Project Path */
        put: operations["put_project_path_api_project_path_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project/filmdata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Project Filmdata */
        get: operations["get_project_filmdata_api_project_filmdata_get"];
        /** Put Project Filmdata */
        put: operations["put_project_filmdata_api_project_filmdata_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project/state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Project State */
        get: operations["get_project_state_api_project_state_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project/perf/location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Perf Location */
        get: operations["get_perf_location_api_project_perf_location_get"];
        /** Put Perf Location */
        put: operations["put_perf_location_api_project_perf_location_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project/perf/detect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post Perfdetect */
        post: operations["post_perfdetect_api_project_perf_detect_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project/scanarea": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Scanarea
         * @description Get the camera Scanarea, the area that defines the film frame content to be used.
         *     All values are normalized (ref_delta: between -1 and 1, size: between 0 and 1) and
         *     independent of the select camera image resolution.
         */
        get: operations["get_scanarea_api_project_scanarea_get"];
        /**
         * Put Scanarea
         * @description Set the ScanArea, the area that defines the film frame content to be used.
         *     All values are normalized (between 0 and 1) to be independent of the select camera image resolution.
         *         - ref_delta: The delta between the Perforation reference point and the top left point of the scan area.
         *         - size: The size of the scan area.
         */
        put: operations["put_scanarea_api_project_scanarea_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/camera/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Camera Preview */
        get: operations["get_camera_preview_api_camera_preview_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/camera/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Camera Live
         * @description Start a stream with MJPEG images.
         */
        get: operations["get_camera_live_api_camera_live_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** APIInvalidDataError */
        APIInvalidDataError: {
            /**
             * Error Type
             * @description Error type. The class name of the error
             * @default
             */
            error_type: string;
            /**
             * Title
             * @description Human-readable error title
             */
            title: string;
            /**
             * Details
             * @description Detailed description
             * @default No details available
             */
            details: string;
            /**
             * Stacktrace
             * @description Stack trace. Only for unhandled exceptions.
             * @default
             */
            stacktrace: string;
        };
        /** APINoActiveProject */
        APINoActiveProject: {
            /**
             * Error Type
             * @description Error type. The class name of the error
             * @default
             */
            error_type: string;
            /**
             * Title
             * @default No active project
             */
            title: string;
            /**
             * Details
             * @default No Project has been loaded. Please load a project first.
             */
            details: string;
            /**
             * Stacktrace
             * @description Stack trace. Only for unhandled exceptions.
             * @default
             */
            stacktrace: string;
        };
        /** APIObjectNotFoundError */
        APIObjectNotFoundError: {
            /**
             * Error Type
             * @description Error type. The class name of the error
             * @default
             */
            error_type: string;
            /**
             * Title
             * @description Human-readable error title
             */
            title: string;
            /**
             * Details
             * @description Detailed description
             * @default No details available
             */
            details: string;
            /**
             * Stacktrace
             * @description Stack trace. Only for unhandled exceptions.
             * @default
             */
            stacktrace: string;
        };
        /** APIProjectAlreadyExists */
        APIProjectAlreadyExists: {
            /**
             * Error Type
             * @description Error type. The class name of the error
             * @default
             */
            error_type: string;
            /**
             * Title
             * @default Project already exists
             */
            title: string;
            /**
             * Details
             * @description Detailed description
             * @default No details available
             */
            details: string;
            /**
             * Stacktrace
             * @description Stack trace. Only for unhandled exceptions.
             * @default
             */
            stacktrace: string;
        };
        /** APIProjectDoesNotExist */
        APIProjectDoesNotExist: {
            /**
             * Error Type
             * @description Error type. The class name of the error
             * @default
             */
            error_type: string;
            /**
             * Title
             * @default Project does not exist
             */
            title: string;
            /**
             * Details
             * @description Detailed description
             * @default No details available
             */
            details: string;
            /**
             * Stacktrace
             * @description Stack trace. Only for unhandled exceptions.
             * @default
             */
            stacktrace: string;
        };
        /** FilmData */
        "FilmData-Input": {
            /**
             * Date
             * @default
             */
            date: string;
            /**
             * Author
             * @default
             */
            author: string;
            /**
             * Description
             * @default
             */
            description: string;
            /** @default {
             *       "key": "super8",
             *       "name": "Super8",
             *       "framerates": [
             *         18,
             *         24
             *       ]
             *     } */
            format: components["schemas"]["FilmFormat"];
            /**
             * Fps
             * @default 18
             */
            fps: number;
            /**
             * Stock
             * @default
             */
            stock: string;
            /**
             * Tags
             * @default []
             */
            tags: string[];
        };
        /** FilmData */
        "FilmData-Output": {
            /**
             * Date
             * @default
             */
            date: string;
            /**
             * Author
             * @default
             */
            author: string;
            /**
             * Description
             * @default
             */
            description: string;
            /** @default {
             *       "key": "super8",
             *       "name": "Super8",
             *       "framerates": [
             *         18,
             *         24
             *       ]
             *     } */
            format: components["schemas"]["FilmFormat"];
            /**
             * Fps
             * @default 18
             */
            fps: number;
            /**
             * Stock
             * @default
             */
            stock: string;
            /**
             * Tags
             * @default []
             */
            tags: string[];
        };
        /** FilmFormat */
        FilmFormat: {
            /** @default  */
            key: components["schemas"]["FilmSpecKey"];
            /**
             * Name
             * @default
             */
            name: string;
            /**
             * Framerates
             * @default []
             */
            framerates: number[];
        };
        /**
         * FilmSpecKey
         * @enum {string}
         */
        FilmSpecKey: "super8" | "normal8" | "std16mm" | "super16" | "unknown";
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** OffsetPoint */
        OffsetPoint: {
            /**
             * Dx
             * @default 0
             */
            dx: number;
            /**
             * Dy
             * @default 0
             */
            dy: number;
        };
        /** PerforationLocation */
        PerforationLocation: {
            /**
             * Top Edge
             * @default 0
             */
            top_edge: number;
            /**
             * Bottom Edge
             * @default 0
             */
            bottom_edge: number;
            /**
             * Inner Edge
             * @default 0
             */
            inner_edge: number;
            /**
             * Outer Edge
             * @default 0
             */
            outer_edge: number;
        };
        /** Point */
        Point: {
            /**
             * X
             * @default 0
             */
            x: number;
            /**
             * Y
             * @default 0
             */
            y: number;
        };
        /** ProjectPathEntry */
        ProjectPathEntry: {
            /**
             * Name
             * @description An identifier for this path, e.g. 'project' or 'scanned'
             */
            name: string;
            /**
             * Description
             * @description What the path is for.
             * @default
             */
            description: string;
            /**
             * Path
             * @description The actual path. May be relative to the application storage folder or absolute. Can contain templates.
             * @default
             */
            path: string;
            /**
             * Resolved
             * @description The computed absolute path on the filesystem. For info only.
             * @default
             */
            resolved: string;
        };
        /** ProjectState */
        ProjectState: {
            /** @default new */
            state: components["schemas"]["ProjectStateEnum"];
            /**
             * Current Frame
             * @default 0
             */
            current_frame: number;
            /**
             * Last Scanned Frame
             * @default 0
             */
            last_scanned_frame: number;
            /**
             * Last Processed Frame
             * @default 0
             */
            last_processed_frame: number;
            /**
             * Errors
             * @default []
             */
            errors: string[];
        };
        /**
         * ProjectStateEnum
         * @enum {string}
         */
        ProjectStateEnum: "new" | "idle" | "run" | "pause" | "failure" | "finished";
        /** ScanArea */
        ScanArea: {
            /**
             * @description The reference this ScanArea is based on.
             * @default {
             *       "top_edge": 0,
             *       "bottom_edge": 0,
             *       "inner_edge": 0,
             *       "outer_edge": 0
             *     }
             */
            perf_ref: components["schemas"]["PerforationLocation"];
            /**
             * @description delta from reference point to top left
             * @default {
             *       "dx": 0,
             *       "dy": 0
             *     }
             */
            ref_delta: components["schemas"]["OffsetPoint"];
            /**
             * @description width of the scan area
             * @default {
             *       "width": 0,
             *       "height": 0
             *     }
             */
            size: components["schemas"]["Size"];
        };
        /** Size */
        Size: {
            /**
             * Width
             * @default 0
             */
            width: number;
            /**
             * Height
             * @default 0
             */
            height: number;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_all_projects_api_projects_all_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
    get_active_project_api_projects_active_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APINoActiveProject"];
                };
            };
        };
    };
    load_project_api_projects_load_put: {
        parameters: {
            query: {
                pid: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIProjectDoesNotExist"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIInvalidDataError"];
                };
            };
        };
    };
    new_project_api_projects_new_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
        };
    };
    delete_project_api_projects_delete_delete: {
        parameters: {
            query: {
                pid: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIProjectDoesNotExist"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIInvalidDataError"];
                };
            };
        };
    };
    get_all_filmformats_api_filmformats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FilmFormat"][];
                };
            };
        };
    };
    get_project_id_api_project_id_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APINoActiveProject"];
                };
            };
        };
    };
    get_project_name_api_project_name_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APINoActiveProject"];
                };
            };
        };
    };
    put_project_name_api_project_name_put: {
        parameters: {
            query: {
                name: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APINoActiveProject"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIProjectAlreadyExists"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIInvalidDataError"];
                };
            };
        };
    };
    get_all_paths_api_project_allpaths_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: components["schemas"]["ProjectPathEntry"];
                    };
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APINoActiveProject"];
                };
            };
        };
    };
    get_project_path_api_project_path_get: {
        parameters: {
            query: {
                name: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectPathEntry"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIObjectNotFoundError"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    put_project_path_api_project_path_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectPathEntry"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectPathEntry"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIObjectNotFoundError"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIInvalidDataError"];
                };
            };
        };
    };
    get_project_filmdata_api_project_filmdata_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FilmData-Output"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIObjectNotFoundError"];
                };
            };
        };
    };
    put_project_filmdata_api_project_filmdata_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FilmData-Input"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FilmData-Output"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APINoActiveProject"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIInvalidDataError"];
                };
            };
        };
    };
    get_project_state_api_project_state_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectState"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APINoActiveProject"];
                };
            };
        };
    };
    get_perf_location_api_project_perf_location_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerforationLocation"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APINoActiveProject"];
                };
            };
        };
    };
    put_perf_location_api_project_perf_location_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PerforationLocation"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerforationLocation"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APINoActiveProject"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    post_perfdetect_api_project_perf_detect_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Point"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerforationLocation"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APINoActiveProject"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_scanarea_api_project_scanarea_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScanArea"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APINoActiveProject"];
                };
            };
        };
    };
    put_scanarea_api_project_scanarea_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScanArea"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScanArea"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APINoActiveProject"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_camera_preview_api_camera_preview_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "image/png": unknown;
                };
            };
        };
    };
    get_camera_live_api_camera_live_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "multipart/x-mixed-replace; boundary=---frame": string;
                };
            };
        };
    };
}
